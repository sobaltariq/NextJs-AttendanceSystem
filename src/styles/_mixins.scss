@use "sass:color";
@use "./utilities/colors.scss" as *;

// Mixin for responsive media queries
@mixin respond($breakpoint) {
  @if $breakpoint == small {
    @media (max-width: 600px) {
      @content;
    }
  } @else if $breakpoint == medium {
    @media (max-width: 768px) {
      @content;
    }
  } @else if $breakpoint == large {
    @media (max-width: 1200px) {
      @content;
    }
  }
}

@mixin display-flex($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin typography(
  $size,
  $weight,
  $lineHeight: 1.5,
  $family: var(--chillax),
  $color: #fff
) {
  font-size: $size;
  font-weight: $weight;
  font-family: $family;
  line-height: $lineHeight;
  color: $color;
}

@mixin box-shadow($x: 0, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.15)) {
  box-shadow: $x $y $blur $color;
}

@mixin transition($properties: all, $duration: 0.3s, $timing: ease-in-out) {
  transition: $properties $duration $timing;
}

// button
@mixin button-style(
  $background-color: var(--primary-blue),
  $text-color: var(--text-inverse),
  $border-color: $background-color,
  $border-radius: 6px,
  $padding: 0.5rem 1rem,
  $font-size: 16px,
  $font-weight: 500,
  $font-family: inherit,
  $transition: 0.3s,
  $box-shadow: none,
  $hover-lightness: -10%,
  $active-lightness: -15%,
  $disabled-opacity: 0.6
) {
  // Base button styles
  display: inline-block;
  padding: $padding;
  border-radius: $border-radius;
  background-color: $background-color;
  color: $text-color;
  border: 1px solid $border-color;
  font-size: $font-size;
  font-weight: $font-weight;
  font-family: $font-family;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all $transition ease-in-out;
  box-shadow: $box-shadow;

  // Hover state
  &:hover:not(:disabled) {
    background-color: color.adjust(
      $background-color,
      $lightness: $hover-lightness
    );
    border-color: color.adjust($border-color, $lightness: $hover-lightness);
  }

  // Active state
  &:active:not(:disabled) {
    background-color: color.adjust(
      $background-color,
      $lightness: $active-lightness
    );
    border-color: color.adjust($border-color, $lightness: $active-lightness);
  }

  // Disabled state
  &:disabled {
    opacity: $disabled-opacity;
    cursor: not-allowed;
  }

  // Allow additional custom styles
  @content;
}
