@use "sass:color";
@use "./utilities//colors.scss" as *;

// Mixin for responsive media queries
@mixin respond($breakpoint) {
  @if $breakpoint == small {
    @media (max-width: 600px) {
      @content;
    }
  } @else if $breakpoint == medium {
    @media (max-width: 768px) {
      @content;
    }
  } @else if $breakpoint == large {
    @media (max-width: 1200px) {
      @content;
    }
  }
}

@mixin display-flex($direction: row, $justify: center, $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin typography(
  $size,
  $weight,
  $lineHeight: 1.5,
  $family: var(--chillax),
  $color: #fff
) {
  font-size: $size;
  font-weight: $weight;
  font-family: $family;
  line-height: $lineHeight;
  color: $color;
}

@mixin box-shadow($x: 0, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.15)) {
  box-shadow: $x $y $blur $color;
}

@mixin transition($properties: all, $duration: 0.3s, $timing: ease-in-out) {
  transition: $properties $duration $timing;
}

// button
@mixin button-style(
  $background-color: #2563eb,
  $text-color: #ffffff,
  $border-color: $background-color,
  $border-width: 1px,
  $border-radius: 6px,
  $padding: 0.5rem 1.5rem,
  $font-size: 16px,
  $font-weight: 500,
  $font-family: inherit,
  $transition: 0.3s ease-in-out,
  $box-shadow: none,
  $hover-darken: 10%,
  $active-darken: 15%,
  $disabled-opacity: 0.6,
  $gradient: null
) {
  // Base button styles
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: $padding;
  font-size: $font-size;
  font-weight: $font-weight;
  font-family: $font-family;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  transition: all $transition;
  box-shadow: $box-shadow;

  // Handle Gradient Background
  @if $gradient != null {
    background: $gradient;
    background-size: 200% auto;
    color: $text-color;
  } @else {
    background-color: $background-color;
    color: $text-color;
  }

  // Hover state
  &:hover:not(:disabled) {
    @if $gradient != null {
      background-position: right center;
    } @else {
      background-color: color.adjust(
        $background-color,
        $lightness: $hover-darken
      );
      border-color: color.adjust($border-color, $lightness: $hover-darken);
    }
  }

  // Active state
  &:active:not(:disabled) {
    background-color: color.adjust(
      $background-color,
      $lightness: $active-darken
    );
    border-color: color.adjust($border-color, $lightness: $active-darken);
  }

  // Disabled state
  &:disabled {
    opacity: $disabled-opacity;
    cursor: not-allowed;
    pointer-events: none;
  }

  @content;
}

// link
// Link Mixin with Different Background Schemes
@mixin link-style(
  $light-bg-color: #ffffff,
  // Default link color on light backgrounds
  $dark-bg-color: #b39ddb,
  // Link color on dark backgrounds
  $hover-color: #9ca3af,
  // Hover color
  $visited-color: #ffffff,
  // Visited link color
  $underline: false,
  // Enable underline
  $font-weight: 500,
  // Default font weight
  $transition: 0.3s ease-in-out
) {
  color: $light-bg-color;
  font-weight: $font-weight;
  text-decoration: if($underline, underline, none);
  transition: all $transition;

  // Hover State
  &:hover {
    color: $hover-color;
  }
}
